# RabbitMq 消息总线

## 一.设计目标
1. 消息可靠(消息有备份，速度损耗低)
2. 异常恢复(能处理以下情况或有以下功能：RabbitMQ重启，网络异常，消息总线平滑升级)
3. 快速扩容(应付迅速增加的消息)
4. 监控和权限管理(对部分异常情况报警，如有必要，增加消息的订阅-发布权限)

## 二.消息总线的优势
       1. 传统的消息队列仅可在单系统中使用，无法升级为微服务供其他系统使用
       2. 统一进行权限管理.转发规则配置
       3. 隐藏通信细节，向外仅暴露调用接口
       4. 可以实现实时监控

## 三.整体架构

    设计图：https://www.processon.com/view/link/5acc1a55e4b00dc8a039108c
    
    框架：swoft
    
    1. 网关统一验证服务调用权限（基于token验证）
    
    2. 读取客户端权限：如发布-订阅权限等
    
        2.1.使用MySql持久化存储权限数据
    
        2.2.使用Redis缓存读取（理论上将使用Redis永久存储），实现缓存穿透
    
        2.3.验证必要权限
    
    3.发布-订阅消息
    
        3.1.为每条消息生成唯一的key值，并存入redis
    
            3.1.1 如果Redis存储失败，则使用备用的mongodb，3天后过期并且不再重推 
    
            3.1.2 异常报警
    
        3.2.使用RabbitMQ或者kafka提供发布-订阅的消息处理服务
    
            3.2.1.不使用Redis发布订阅的原因：
    
                    a.Redis是单线程的，无法做到负载均衡，无法实现快速扩容
    
                    b.Redis没有相应的机制保证消息的消费，消息丢失无法找回
    
                    c.Redis消息消费能力不如RabbitMQ
    
        3.3.实时监控，反馈是否需要再启动一个容器应对消息阻塞的情况
    
    4.消息转发
    
        4.1.读取客户端转发规则（缓存穿透）
    
        4.2.转发消息
    
            4.2.1.转发成功：获得相应的回调结果
    
                4.2.1.1.删除Redis中存储的key
    
            4.2.2 转发异常：将失败的消息放入定时转发器中
    
                4.2.2.1.将失败的消息放入定时转发器中处理
    
    5.定时转发器
    
        5.1.重新设置失败消息的Redis超时时间
    
        5.2.订阅key值过期时间，重新转发
    
            5.2.1.再次转发失败，如果在转发次数限制之内，再次放入定时转发器
    
            5.2.2.超过一定次数TODO
    
    6.监控
    
        6.1.Redis异常
    
        6.2.监控消息阻塞
    
        6.3.监控最终转发失败
        
    7.后期扩展
    
        7.1.提供客户端配置
    
            a.申请客户端账户
    
            b.配置消息转发规则
